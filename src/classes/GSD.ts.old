import * as jsonUtils from '../utils/jsonUtils';
import * as zipUtils from '../utils/zipUtils';
import JSZip from 'jszip'; // Handle the .mvr file (just a zip file)
import { XMLParser } from 'fast-xml-parser';
import { js } from 'three/tsl';

export class GSD {
    modelPositions: Map<string, vec3>;
    structure: any;

    constructor(file: JSZip.JSZipObject) {
        this.init(file);
    }

    async init(file: JSZip.JSZipObject) {
        const textContent: string = await zipUtils.getTextContent(file);

        const parser = new XMLParser({
            ignoreAttributes: false, // Do not ignore attributes, keep them in the result
            attributeNamePrefix: "_", // Prefix for attributes in the result
        });
        const jsonObj = parser.parse(textContent);

        // console.log(jsonObj)

        const sceneDescription: GeneralSceneDescription = mapJsonToGeneralSceneDescription(jsonObj);
        console.log(JSON.stringify(sceneDescription, null, 2));
    }
}


// JSON Data Structure
export interface GeneralSceneDescription {
    readonly Scene: Scene;
}

export interface Scene {
    readonly AUXData: AUXData;
    readonly Layers: Layers;
}

export interface AUXData {
    readonly Symdef?: Symdef[];
}

export interface Symdef {
    readonly SymdefChildList?: SymdefChildList;
}

export interface SymdefChildList {
    readonly Geometry3D?: Geometry3D[];
    readonly Symbol?: Symbol;
}

export interface Layers {
    readonly Layer: Layer[];
}

export interface Layer {
    readonly Matrix?: Float32Array[][];
    readonly ChildList: ChildList;
    readonly _uuid: string;
    readonly _name?: string;
}

export interface ChildList {
    readonly SceneObject?: SceneObject[];
    readonly GroupObject?: GroupObject[];
    readonly FocusPoint?: FocusPoint[];
    readonly Fixture?: Fixture[];
    readonly Support?: Support[];
    readonly Truss?: Truss[];
    readonly VideoScreen?: VideoScreen[];
    readonly Projector?: Projector[];
}

// ------ ChildList Children ------
export interface SceneObject {
    readonly Matrix?: Float32Array[][];
    readonly Geometries: Geometries;
    readonly ChildList?: ChildList;

    readonly _uuid?: string;
    readonly _name?: string;
}

export interface GroupObject {
    readonly Matrix?: Float32Array[][];
    readonly ChildList?: ChildList;

    readonly _uuid?: string;
    readonly _name?: string;
}

export interface FocusPoint {
    readonly Matrix?: Float32Array[][];
    readonly Geometries: Geometries;

    readonly _uuid?: string;
    readonly _name?: string;
}

export interface Fixture {
    readonly Matrix?: Float32Array[][];
    readonly GDTFSpec: GDTFSpec;
    readonly ChildList?: ChildList;

    readonly _uuid?: string;
    readonly _name?: string;
}

export interface Support {
    readonly Matrix?: Float32Array[][];
    readonly Geometries: Geometries;
    readonly ChildList?: ChildList;

    readonly _uuid?: string;
    readonly _name?: string;
}

export interface Truss {
    readonly Matrix?: Float32Array[][];
    readonly Geometries: Geometries;
    readonly ChildList?: ChildList;

    readonly _uuid?: string;
    readonly _name?: string;
}

export interface VideoScreen {
    readonly Matrix?: Float32Array[][];
    readonly Geometries: Geometries;
    readonly ChildList?: ChildList;

    readonly _uuid?: string;
    readonly _name?: string;
}

export interface Projector {
    readonly Matrix?: Float32Array[][];
    readonly Geometries: Geometries;
    readonly ChildList?: ChildList;

    readonly _uuid?: string;
    readonly _name?: string;
}
// ------ ChildList Children ------

export interface GDTFSpec {
    readonly _fileName: string;
}

export interface Geometries {
    readonly Geometry3D?: Geometry3D[];
    readonly Symbol?: Symbol;
}

export interface Geometry3D {
    readonly Matrix?: Float32Array[][];
    readonly _fileName: string;
}

export interface Symbol {
    readonly _uuid?: string;
    readonly _symdef?: string;
}

// Parsing functions
// Recursive function to map parsed JSON to the interfaces
function mapJsonToGeneralSceneDescription(json: any): GeneralSceneDescription {
    return {
        Scene: mapJsonToScene(json.GeneralSceneDescription.Scene)
    };
}

function mapJsonToScene(json: any): Scene {
    return {
        AUXData: mapJsonToAUXData(json.AUXData),
        Layers: mapJsonToLayers(json.Layers)
    };
}

function mapJsonToAUXData(json: any): AUXData {
    return {
        Symdef: json.Symdef ? Array.isArray(json.Symdef) ? json.Symdef.map((obj: any) => mapJsonToSymdef(obj)) : [mapJsonToSymdef(json.Symdef)] : undefined,
    };
}

function mapJsonToSymdef(json: any): Symdef[] {

    return [{
        SymdefChildList: json.ChildList ? mapJsonToSymdefChildList(json.ChildList) : undefined
    }];
}

function mapJsonToSymdefChildList(json: any): SymdefChildList {
    return {

        Geometry3D: json.Geometry3D ? Array.isArray(json.Geometry3D) ? json.Geometry3D.map((obj: any) => mapJsonToGeometry3D(obj)) : [mapJsonToGeometry3D(json.Geometry3D)] : undefined,
        Symbol: json.Symbol ? mapJsonToSymbol(json.Symbol) : undefined
    };
}

function mapJsonToLayers(json: any): Layers {
    return {
        Layer: json.Layer.map((layer: any) => mapJsonToLayer(layer))
    };
}

function mapJsonToLayer(json: any): Layer {
    return {
        _uuid: json._uuid,
        _name: json._name ? json._name : undefined,
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        ChildList: mapJsonToChildList(json.ChildList)
    };
}

function mapJsonToChildList(json: any): ChildList {
    return {
        GroupObject: json.GroupObject ? Array.isArray(json.GroupObject) ? json.GroupObject.map((obj: any) => mapJsonToGroupObject(obj)) : [mapJsonToGroupObject(json.GroupObject)] : undefined,
        SceneObject: json.SceneObject ? Array.isArray(json.SceneObject) ? json.SceneObject.map((obj: any) => mapJsonToSceneObject(obj)) : [mapJsonToSceneObject(json.SceneObject)] : undefined,
        FocusPoint: json.FocusPoint ? Array.isArray(json.FocusPoint) ? json.FocusPoint.map((obj: any) => mapJsonToFocusPoint(obj)) : [mapJsonToFocusPoint(json.FocusPoint)] : undefined,
        Fixture: json.Fixture ? Array.isArray(json.Fixture) ? json.Fixture.map((obj: any) => mapJsonToFixture(obj)) : [mapJsonToFixture(json.Fixture)] : undefined,
        Support: json.Support ? Array.isArray(json.Support) ? json.Support.map((obj: any) => mapJsonToSupport(obj)) : [mapJsonToSupport(json.Support)] : undefined,
        Truss: json.Truss ? Array.isArray(json.Truss) ? json.Truss.map((obj: any) => mapJsonToTruss(obj)) : [mapJsonToTruss(json.Truss)] : undefined,
        VideoScreen: json.VideoScreen ? Array.isArray(json.VideoScreen) ? json.VideoScreen.map((obj: any) => mapJsonToVideoScreen(obj)) : [mapJsonToVideoScreen(json.VideoScreen)] : undefined,
        Projector: json.Projector ? Array.isArray(json.Projector) ? json.Projector.map((obj: any) => mapJsonToProjector(obj)) : [mapJsonToProjector(json.Projector)] : undefined,
    };
}

// ------ ChildList Children ------
function mapJsonToSceneObject(json: any): SceneObject {
    return {
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        Geometries: mapJsonToGeometries(json.Geometries),
        ChildList: json.ChildList ? mapJsonToChildList(json.ChildList) : undefined,


        _uuid: json._uuid ? json._uuid : undefined,
        _name: json._name ? json._name : undefined,
    };
}

function mapJsonToGroupObject(json: any): GroupObject {
    return {
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        ChildList: json.ChildList ? mapJsonToChildList(json.ChildList) : undefined,

        _uuid: json._uuid ? json._uuid : undefined,
        _name: json._name ? json._name : undefined,
    };
}

function mapJsonToFocusPoint(json: any): FocusPoint {
    return {
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        Geometries: mapJsonToGeometries(json.Geometries),

        _uuid: json._uuid ? json._uuid : undefined,
        _name: json._name ? json._name : undefined,
    };
}

function mapJsonToFixture(json: any): Fixture {
    return {
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        GDTFSpec: mapJsonToGDTFSpec(json.GDTFSpec),
        ChildList: json.ChildList ? mapJsonToChildList(json.ChildList) : undefined,

        _uuid: json._uuid ? json._uuid : undefined,
        _name: json._name ? json._name : undefined,
    };
}

function mapJsonToSupport(json: any): Support {
    return {
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        Geometries: mapJsonToGeometries(json.Geometries),
        ChildList: json.ChildList ? mapJsonToChildList(json.ChildList) : undefined,

        _uuid: json._uuid ? json._uuid : undefined,
        _name: json._name ? json._name : undefined,
    };
}

function mapJsonToTruss(json: any): Truss {
    return {
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        Geometries: mapJsonToGeometries(json.Geometries),
        ChildList: json.ChildList ? mapJsonToChildList(json.ChildList) : undefined,

        _uuid: json._uuid ? json._uuid : undefined,
        _name: json._name ? json._name : undefined,
    };
}

function mapJsonToVideoScreen(json: any): VideoScreen {
    return {
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        Geometries: mapJsonToGeometries(json.Geometries),
        ChildList: json.ChildList ? mapJsonToChildList(json.ChildList) : undefined,

        _uuid: json._uuid ? json._uuid : undefined,
        _name: json._name ? json._name : undefined,
    };
}

function mapJsonToProjector(json: any): Projector {
    return {
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        Geometries: mapJsonToGeometries(json.Geometries),
        ChildList: json.ChildList ? mapJsonToChildList(json.ChildList) : undefined,

        _uuid: json._uuid ? json._uuid : undefined,
        _name: json._name ? json._name : undefined,
    };
}
// ------ ChildList Children ------

function mapJsonToGDTFSpec(json: any): GDTFSpec {
    return {
        _fileName: json._fileName,
    };
}

function mapJsonToGeometries(json: any): Geometries {
    return {
        Geometry3D: json.Geometry3D ? Array.isArray(json.Geometry3D) ? json.Geometry3D.map((obj: any) => mapJsonToGeometry3D(obj)) : [mapJsonToGeometry3D(json.Geometry3D)] : undefined,
        Symbol: json.Symbol ? mapJsonToSymbol(json.Symbol) : undefined
    };
}

function mapJsonToGeometry3D(json: any): Geometry3D[] {
    return [{
        Matrix: json.Matrix ? mapJsonToMatrix(json.Matrix) : undefined,
        _fileName: json._fileName
    }];
}

function mapJsonToMatrix(json: any): Float32Array[][] {
    const matrix = json
        .slice(1, -1) // Remove the outer curly braces
        .split('}{') // Split by rows
        .map(row => row.split(',').map(parseFloat));
    return matrix;
}

function mapJsonToSymbol(json: any): Symbol {
    return {
        _uuid: json._uuid,
        _symdef: json._symdef ? json._symdef : undefined
    };
}


// Add similar mapping functions for GroupObject, FocusPoint, Fixture, etc.
